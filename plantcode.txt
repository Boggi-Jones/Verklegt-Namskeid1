Contract State Diagram:
@startuml
[*] --> ValidContract : New contract made
ExpiredContract : Customer late at returning has to pay extra
PaidContract : Can't be used in payment again
DeletedContract : Gets removed from the system

ValidContract -> ValidContract : Contract details changed
ValidContract --> DeletedContract : Employee deletes a contract
ValidContract --> ExpiredContract : Contract is late
ValidContract --> PaidContract :  User pays the contract
ExpiredContract --> PaidContract : User pays with extra payment
PaidContract --> [*]
DeletedContract --> [*]
@enduml

--------------------------------------------------------------------

Vehicle State Diagram:
@startuml
[*] --> AvailableVehicle : New vehicle added to the fleet
AvailableVehicle --> RentedVehicle : Rented out to a customer
DamagedVehicle --> AvailableVehicle : Vehicle is fixed
RentedVehicle --> DamagedVehicle : Customer wrecks the vehicle
RentedVehicle --> AvailableVehicle : Customer returns the vehicle
@enduml

--------------------------------------------------------------------

UI Class Diagram:
@startuml
class UIMain {
Logic layer wrapper
}

UIMain : listobject()

class EmployeesUI 
class LocationUI 
class FleetUI 
class ContractUI 

UIMain  <|-- EmployeesUI
UIMain  <|-- LocationUI
UIMain  <|-- FleetUI
UIMain  <|-- ContractUI

EmployeesUI : listobject(Employee)
@enduml

--------------------------------------------------------------------

Logic Class Diagram:
@startuml
class LogicWrapper {
DATA wrapper
}

class EmployeeLogic 
class LocationLogic
class VehicleLogic
class ContractLogic

EmployeeLogic : filteremployees()
EmployeeLogic : removeemployee(id)
EmployeeLogic : addemployee()
EmployeeLogic : editemployeeinfo(id)

LocationLogic : filtercountry()
LocationLogic : addlocation()
LocationLogic : removelocation()
LocationLogic : editlocationinfo(name of airport)

VehicleLogic : filtervehiclefleet()
VehicleLogic : editvehicleinfo(number plate)
VehicleLogic : registernewvehicle()
VehicleLogic : editrate(type)

ContractLogic : filtercontract()
ContractLogic : makenewcontract()
ContractLogic : editcontractinfo(id)
ContractLogic : cancelcontract(id)
ContractLogic : printcontract(id)
ContractLogic : calculatefinalprice(id)

LogicWrapper -- VehicleLogic
LogicWrapper -- EmployeeLogic
LogicWrapper -- ContractLogic
LogicWrapper -- LocationLogic

----------------------------------------------------------------------

Models Class Diagram:
@startuml
class Employee {
name
id
home adress
home phone
gsm phone
email
location
role
}
class Vehicle {
status
type
rate
manufacturer
condition
age
color
number plate
driving license
rentcounter
}
class Location {
name of airport
country
opening hours
phone number
}
class Customer {
name
id
email
gsm number
home adress
driving license
returned late before
loyalty customer
}
class Contracts {
date
duration
country
city
name employee
paid
finalprice
}


Location <|-- Vehicle
Customer  <|-- Contracts
Vehicle <|-- Contracts
@enduml

-------------------------------------------------------------------------

DATA Class Diagram:
@startuml
class DataWrapper{

}

class DataMain
class VehicleData
class LocationData
class EmployeeData
class ContractData
class CustomerData

DataWrapper -- DataMain
DataMain <|-- VehicleData
DataMain <|-- LocationData
DataMain <|-- EmployeeData
DataMain <|-- ContractData
DataMain <|-- CustomerData
@enduml

---------------------------------------------------------------------------

All Class Diagram(Holy Grail):
@startuml
class UIMain {
Logic layer wrapper
}

UIMain : listobject()
UIMain : addobject()

class EmployeesUI 
class LocationUI 
class FleetUI 
class ContractUI 

UIMain  <|-- EmployeesUI
UIMain  <|-- LocationUI
UIMain  <|-- FleetUI
UIMain  <|-- ContractUI

EmployeesUI : listobject(Employee)

EmployeesUI -- LogicWrapper
LocationUI -- LogicWrapper
FleetUI -- LogicWrapper
ContractUI -- LogicWrapper

class LogicWrapper {
DATA wrapper
}

class EmployeeLogic 
class LocationLogic
class VehicleLogic
class ContractLogic

EmployeeLogic : filteremployees()
EmployeeLogic : removeemployee(id)
EmployeeLogic : addemployee()
EmployeeLogic : editemployeeinfo(id)

LocationLogic : filtercountry()
LocationLogic : addlocation()
LocationLogic : removelocation()
LocationLogic : editlocationinfo(name of airport)

VehicleLogic : filtervehiclefleet()
VehicleLogic : editvehicleinfo(number plate)
VehicleLogic : registernewvehicle()
VehicleLogic : editrate(type)

ContractLogic : filtercontract()
ContractLogic : makenewcontract()
ContractLogic : editcontractinfo(id)
ContractLogic : cancelcontract(id)
ContractLogic : printcontract(id)
ContractLogic : calculatefinalprice(id)

LogicWrapper -- VehicleLogic
LogicWrapper -- EmployeeLogic
LogicWrapper -- ContractLogic
LogicWrapper -- LocationLogic

VehicleLogic -- DataWrapper
EmployeeLogic -- DataWrapper
LocationLogic -- DataWrapper
ContractLogic -- DataWrapper

class DataWrapper{

}

class DataMain
class VehicleData
class LocationData
class EmployeeData
class ContractData
class CustomerData

DataWrapper -- DataMain
DataMain <|-- VehicleData
DataMain <|-- LocationData
DataMain <|-- EmployeeData
DataMain <|-- ContractData
DataMain <|-- CustomerData
@enduml
Contract State Diagram:
@startuml
[*] --> ValidContract : New contract made
ExpiredContract : Customer late at returning has to pay extra
PaidContract : Can't be used in payment again
DeletedContract : Gets removed from the system

ValidContract -> ValidContract : Contract details changed
ValidContract --> DeletedContract : Employee deletes a contract
ValidContract --> ExpiredContract : Contract is late
ValidContract --> PaidContract :  User pays the contract
ExpiredContract --> PaidContract : User pays with extra payment
PaidContract --> [*]
DeletedContract --> [*]
@enduml

--------------------------------------------------------------------

Vehicle State Diagram:
@startuml
[*] --> AvailableVehicle : New vehicle added to the fleet
AvailableVehicle --> RentedVehicle : Rented out to a customer
DamagedVehicle --> AvailableVehicle : Vehicle is fixed
RentedVehicle --> DamagedVehicle : Customer wrecks the vehicle
RentedVehicle --> AvailableVehicle : Customer returns the vehicle
@enduml

--------------------------------------------------------------------

UI Class Diagram:
@startuml
class UIMain {
Logic layer wrapper
}

UIMain : listobject()

class EmployeesUI 
class LocationUI 
class FleetUI 
class ContractUI 

UIMain  <|-- EmployeesUI
UIMain  <|-- LocationUI
UIMain  <|-- FleetUI
UIMain  <|-- ContractUI
@enduml

--------------------------------------------------------------------

Logic Class Diagram:
@startuml
class LogicMain {
DATA wrapper
}

class EmployeeLogic 
class LocationLogic
class VehicleLogic
class ContractLogic

EmployeeLogic : filteremployees()
EmployeeLogic : removeemployee(id)
EmployeeLogic : addemployee()
EmployeeLogic : editemployeeinfo(id)

LocationLogic : filtercountry()
LocationLogic : addlocation()
LocationLogic : removelocation()
LocationLogic : editlocationinfo(name of airport)

VehicleLogic : filtervehiclefleet()
VehicleLogic : editvehicleinfo(number plate)
VehicleLogic : registernewvehicle()
VehicleLogic : editrate(type)

ContractLogic : filtercontract()
ContractLogic : makenewcontract()
ContractLogic : editcontractinfo(id)
ContractLogic : cancelcontract(id)
ContractLogic : printcontract(id)
ContractLogic : calculatefinalprice(id)

LogicMain -- VehicleLogic
LogicMain -- EmployeeLogic
LogicMain -- ContractLogic
LogicMain -- LocationLogic

----------------------------------------------------------------------

Models Class Diagram:
@startuml
class Employee {
name
id
home adress
home phone
gsm phone
email
location
role
}
class Vehicle {
status
type
rate
manufacturer
condition
age
color
number plate
driving license
rentcounter
}
class Location {
name of airport
country
opening hours
phone number
}
class Customer {
name
id
email
gsm number
home adress
driving license
returned late before
loyalty customer
}
class Contracts {
date
duration
country
city
name employee
paid
finalprice
}


Location <|-- Vehicle
Customer  <|-- Contracts
Vehicle <|-- Contracts
@enduml

-------------------------------------------------------------------------

DATA Class Diagram:
@startuml
class DataMain{

}

class VehicleData
class LocationData
class EmployeeData
class ContractData
class CustomerData

DataMain <|-- VehicleData
DataMain <|-- LocationData
DataMain <|-- EmployeeData
DataMain <|-- ContractData
DataMain <|-- CustomerData
@enduml

---------------------------------------------------------------------------

All Class Diagram(Holy Grail):
@startuml
class UIMain {
Logic layer wrapper
}

UIMain : UILoop()

class ContractUI
class EmployeeUI
class FleetUI
class LocationUI
class ReportsUI

EmployeeUI : employee_loop()
EmployeeUI : manage_employee()
EmployeeUI : add_employee()
EmployeeUI : remove_employee()
EmployeeUI : update_employee()
EmployeeUI : get_all_employees()
EmployeeUI : search_employee()

LocationUI : location_loop()
LocationUI : edit_location()
LocationUI : add_location()
LocationUI : remove_location()
LocationUI : update_location()
LocationUI : all_locations()
LocationUI : search_location()

ContractUI : contract_loop()
ContractUI : the_customer()
ContractUI : add_contract()
ContractUI : remove_contract()
ContractUI : update_contract()
ContractUI : all_contracts()
ContractUI : print_contract()
ContractUI : charge_contract()

FleetUI : fleet_loop()
FleetUI : edit_vehicle()
FleetUI : add_vehicle()
FleetUI : remove_vehicle()
FleetUI : update_vehicle_information()
FleetUI : all_vehicles()

ReportsUI : reports_loop()
ReportsUI : income()
ReportsUI : vehicle_usage()
ReportsUI : contracts_period()

UIMain  -- EmployeeUI
UIMain  -- LocationUI
UIMain  -- FleetUI
UIMain  -- ContractUI
UIMain  -- ReportsUI

EmployeeUI -- LogicMain
LocationUI -- LogicMain
FleetUI -- LogicMain
ContractUI -- LogicMain
ReportsUI -- LogicMain

class LogicMain {
DATA wrapper
}

class ContractLogic 
class CustomerLogic 
class EmployeeLogic
class LocationLogic
class RoleLogic
class ReportLogic 
class VehicleLogic

EmployeeLogic : filter_employees(filter, attribute)
EmployeeLogic : remove_employee(ssn)
EmployeeLogic : add_employee(employee_class)
EmployeeLogic : edit_employee_info(ssn, attribute, new_information)
EmployeeLogic : change_employee_info(ssn, emp_name)

LocationLogic : filter_country(filter, attribute)
LocationLogic : add_location(location_class)
LocationLogic : remove_location(name_of_airport)
LocationLogic : edit_location_info(name_of_airport, attribute, new_information)

VehicleLogic : filter_vehicle_fleet(filter, attribute)
VehicleLogic : edit_vehicle_info(number_plate, attribute, new_information)
VehicleLogic : registernewvehicle(vehicle_class)
VehicleLogic : remove_vehicle(number_plate)
VehicleLogic : editrate(vehicle_type, current_rate, new_rate)

ContractLogic : filter_contract(filter, attribute)
ContractLogic : make_new_contract(contract_class)
ContractLogic : edit_contract_info(ssn, attribute, new_information)
ContractLogic : cancel_contract(ssn)
ContractLogic : check_license(customer_class, number_plate)
ContractLogic : change_vehicle(contract_class, attribute, new_number_plate)
ContractLogic : charge_contract(ssn, condition)
ContractLogic : calculate_final_price(duration, vehicle_class)
ContractLogic : edit_contract_date(ssn, attribute, new_date)

CustomerLogic : get_list_of_customers(filter, attribute)
CustomerLogic : add_customer_to_the_system(customer_class)
CustomerLogic : remove_customer(ssn)
CustomerLogic : edit_customer(ssn, attribute, new_information)

ReportLogic : most_popular_type_by_location()
ReportLogic : overview_of_income(start_date, end_date)
ReportLogic : type_usage_by_location()
ReportLogic : overview_of_payment_status(start_date, end_date)

RoleLogic : role_list(filter, attribute)
RoleLogic : add_employee(role_class)


LogicMain -- VehicleLogic
LogicMain -- EmployeeLogic
LogicMain -- ContractLogic
LogicMain -- LocationLogic
LogicMain -- CustomerLogic
LogicMain -- ReportLogic

VehicleLogic -- DataMain
EmployeeLogic -- DataMain
LocationLogic -- DataMain
ContractLogic -- DataMain
CustomerLogic -- DataMain
ReportLogic -- DataMain

class DataMain{

}

DataMain : get_list(filename)
DataMain : add_to_list(filename, value)
DataMain : overwrite(filename, list_of_items)
@enduml